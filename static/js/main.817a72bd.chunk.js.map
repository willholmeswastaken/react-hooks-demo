{"version":3,"sources":["logo.svg","components/form-use-state.jsx","components/form-use-state-effect.jsx","components/form-use-reducer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","formUseState","useState","undefined","name","setName","age","setAge","Container","fluid","Row","Col","Form","Group","controlId","Label","Control","placeholder","onKeyUp","ev","target","value","Text","className","Button","variant","type","onClick","alert","useEffect","initialState","reducer","state","action","val","Error","formUseReducer","useReducer","dispatch","App","Tabs","defaultActiveKey","id","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.817a72bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useState } from \"react\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from \"react-bootstrap/Col\";\n\nconst formUseState = () => {\n  const [ name, setName ] = useState(undefined);\n  const [ age, setAge ] = useState(undefined);\n  return (\n    <Container fluid>\n      <Row>\n          <Col>\n        <Form>\n          <Form.Group controlId=\"formBasicEmail\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control placeholder=\"Enter name\" onKeyUp={ev => setName(ev.target.value)} />\n            <Form.Text className=\"text-muted\">\n              We'll never share your name with anyone else.\n            </Form.Text>\n          </Form.Group>\n\n          <Form.Group controlId=\"formBasicPassword\">\n            <Form.Label>Age</Form.Label>\n            <Form.Control placeholder=\"Enter age\" onKeyUp={ev => setAge(ev.target.value)} />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"button\" onClick={() => alert(`${name} : ${age}`)}>\n            Submit\n          </Button>\n        </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default formUseState;\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useState, useEffect } from \"react\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from \"react-bootstrap/Col\";\n\nconst formUseState = () => {\n  const [ name, setName ] = useState(undefined);\n  const [ age, setAge ] = useState(undefined);\n\n  // With this hook, you can keep the array as empty to only fire on mount. Or if you want to observe value changes of a var you can add it to the array of observables.\n  useEffect(() => {\n      alert('hi this is the use effect hook being hit on mount!');\n  }, []);\n\n  return (\n    <Container fluid>\n      <Row>\n          <Col>\n        <Form>\n          <Form.Group controlId=\"formBasicEmail\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control placeholder=\"Enter name\" onKeyUp={ev => setName(ev.target.value)} />\n            <Form.Text className=\"text-muted\">\n              We'll never share your name with anyone else.\n            </Form.Text>\n          </Form.Group>\n\n          <Form.Group controlId=\"formBasicPassword\">\n            <Form.Label>Age</Form.Label>\n            <Form.Control placeholder=\"Enter age\" onKeyUp={ev => setAge(ev.target.value)} />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"button\" onClick={() => alert(`${name} : ${age}`)}>\n            Submit\n          </Button>\n        </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default formUseState;\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useReducer } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nconst initialState = { name: \"will\", age: 23 };\n\nconst NAME_UPDATE = \"NAME_UPDATE\";\nconst AGE_UPDATE = \"AGE_UPDATE\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case NAME_UPDATE:\n      return { ...state, name: action.val };\n    case AGE_UPDATE:\n      return { ...state, age: action.val };\n    default:\n      throw new Error();\n  }\n};\n\nconst formUseReducer = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                placeholder=\"Enter name\"\n                onKeyUp={(ev) =>\n                  dispatch({ type: NAME_UPDATE, val: ev.target.value })\n                }\n              />\n              <Form.Text className=\"text-muted\">\n                We'll never share your name with anyone else.\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Age</Form.Label>\n              <Form.Control\n                placeholder=\"Enter age\"\n                onKeyUp={(ev) =>\n                  dispatch({ type: AGE_UPDATE, val: ev.target.value })\n                }\n              />\n            </Form.Group>\n            <Button\n              variant=\"primary\"\n              type=\"button\"\n              onClick={() => alert(`${state.name} : ${state.age}`)}\n            >\n              Submit\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default formUseReducer;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport FormUseState from \"./components/form-use-state\";\nimport FormUseStateEffect from \"./components/form-use-state-effect\";\nimport FormUseReducer from \"./components/form-use-reducer\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Col from \"react-bootstrap/Col\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container fluid>\n        <Row>\n          <Col>\n            <h1>Welcome to the form playground!</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h4>Pick your form type below...</h4>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Tabs defaultActiveKey=\"useState\" id=\"uncontrolled-tab-example\">\n              <Tab eventKey=\"useState\" title=\"UseState\">\n                <FormUseState />\n              </Tab>\n              <Tab eventKey=\"useReducer\" title=\"UseReducer\">\n                <FormUseReducer />\n              </Tab>\n              <Tab eventKey=\"useStateEffect\" title=\"UseStateEffect\">\n                <FormUseStateEffect />\n              </Tab>\n            </Tabs>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}